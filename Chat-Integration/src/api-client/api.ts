/* tslint:disable */
/* eslint-disable */
/**
 * API Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EnvironmentVariable
 */
export interface EnvironmentVariable {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariable
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariable
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface Execute200Response
 */
export interface Execute200Response {
    /**
     * 
     * @type {number}
     * @memberof Execute200Response
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof Execute200Response
     */
    'events': string;
}
/**
 * 
 * @export
 * @interface ExecutionEnvironmentSpec
 */
export interface ExecutionEnvironmentSpec {
    /**
     * 
     * @type {Array<EnvironmentVariable>}
     * @memberof ExecutionEnvironmentSpec
     */
    'environment_variables'?: Array<EnvironmentVariable>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExecutionEnvironmentSpec
     */
    'languageDependencies'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExecutionEnvironmentSpec
     */
    'systemDependencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExecutionEnvironmentSpec
     */
    'setup'?: string;
}
/**
 * 
 * @export
 * @interface ExecutionRequest
 */
export interface ExecutionRequest {
    /**
     * 
     * @type {ExecutionEnvironmentSpec}
     * @memberof ExecutionRequest
     */
    'environment'?: ExecutionEnvironmentSpec;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'version'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExecutionRequest
     */
    'max_retries'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExecutionRequest
     */
    'timeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'cmdLineArgs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'compileArgs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'command'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'files'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'input'?: string;
}
/**
 * 
 * @export
 * @interface FlakeJobIdGet200Response
 */
export interface FlakeJobIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof FlakeJobIdGet200Response
     */
    'flake': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute: async (executionRequest: ExecutionRequest, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'executionRequest' is not null or undefined
            assertParamExists('execute', 'executionRequest', executionRequest)
            const localVarPath = `/executions/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches flake of a given job
         * @summary Fetch Flake
         * @param {number} jobId Job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flakeJobIdGet: async (jobId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('flakeJobIdGet', 'jobId', jobId)
            const localVarPath = `/flake/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execute200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.execute(executionRequest, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.execute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches flake of a given job
         * @summary Fetch Flake
         * @param {number} jobId Job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flakeJobIdGet(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlakeJobIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flakeJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.flakeJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<Execute200Response> {
            return localVarFp.execute(executionRequest, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches flake of a given job
         * @summary Fetch Flake
         * @param {number} jobId Job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flakeJobIdGet(jobId: number, options?: RawAxiosRequestConfig): AxiosPromise<FlakeJobIdGet200Response> {
            return localVarFp.flakeJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Execute a script
     * @summary Execute a script
     * @param {ExecutionRequest} executionRequest 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).execute(executionRequest, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches flake of a given job
     * @summary Fetch Flake
     * @param {number} jobId Job ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public flakeJobIdGet(jobId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).flakeJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }
}



